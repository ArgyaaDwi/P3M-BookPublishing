// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
  output   = "../src/types/interfaces.ts"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum user_role {
  ADMIN
  DOSEN
  PENERBIT
}

model Major {
  id Int @id @default(autoincrement())
  major_name String @unique
  major_description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)

  @@map("majors")
  users User[]

}
model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  role user_role
  major_id Int?
  major Major? @relation(fields: [major_id], references: [id])

  nidn String?
  address String? 
  phone_number BigInt?
  profile_pic String?

  publications Publication[] @relation("LecturerPublication")
  publisherPublication Publication[] @relation("PublisherPublication")
  activities PublicationActivity[] @relation("ActivityUser")
  transactions Transaction[] @relation("UserTransaction")
  transactionLogs TransactionLog[] @relation("UserTransactionLog")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
  @@map("users")
}

model PublicationStatus{
  id Int @id @default(autoincrement())
  status_name String @unique
  status_description String? @unique

  publications Publication[] @relation("StatusPublication")
  activities PublicationActivity[] @relation("StatusActivities")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
  @@map("publication_status")

}

model Publication{
  id Int @id @default(autoincrement())

  user_id Int
  publisher_id Int?

  lecturer User @relation(fields: [user_id], references: [id], name: "LecturerPublication")
  publisher User? @relation(fields: [publisher_id], references: [id], name: "PublisherPublication")
  status PublicationStatus @relation(fields: [current_status_id], references: [id], name: "StatusPublication")
  activities PublicationActivity[] @relation("PublicationActivities")
  items TransactionItem[] @relation("Publications")

  publication_ticket String
  publication_title String
  publication_document String
  current_status_id Int
  supporting_url String?
  is_invoice Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
  @@map("publication")
}

model PublicationActivity{
  id Int @id @default(autoincrement())

  publication_id Int
  user_id Int
  publication_status_id Int

  publication Publication @relation(fields: [publication_id], references: [id], name: "PublicationActivities")
  user User @relation(fields: [user_id], references: [id], name: "ActivityUser")
  status PublicationStatus @relation(fields: [publication_status_id], references: [id], name: "StatusActivities")

  publication_notes String?
  supporting_url String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted Boolean @default(false)
  @@map("publication_activities")
}
model Transaction {
  id          Int               @id @default(autoincrement())
  user_id     Int
  current_status_id       Int
  payment_proof String?          
  transaction_notes String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         Boolean           @default(false)
  @@map("transactions")

  user  User @relation(fields: [user_id], references: [id], name: "UserTransaction")
  status          TransactionStatus @relation(fields: [current_status_id], references: [id], name: "TransactionStatus")
  items           TransactionItem[] @relation("TransactionItems")
  logs            TransactionLog[] @relation("TransactionLogs")
}
model TransactionItem {
  id            Int         @id @default(autoincrement())
  transaction_id Int
  publication_id Int
  cost          Int
  quantity Int @default(1)
  total_cost    Int

  @@map("transaction_items")
  transaction   Transaction @relation(fields: [transaction_id], references: [id], name: "TransactionItems")
  publication   Publication @relation(fields: [publication_id], references: [id], name: "Publications")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         Boolean           @default(false)
}
model TransactionLog {
  id            Int         @id @default(autoincrement())
  transaction_id Int
  transaction_status_id      Int
  user_id        Int?       
  note          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         Boolean           @default(false)
  @@map("transaction_logs")
  

  transaction   Transaction @relation(fields: [transaction_id], references: [id], name: "TransactionLogs")
  user          User?       @relation(fields: [user_id], references: [id], name: "UserTransactionLog")
  status        TransactionStatus @relation(fields: [transaction_status_id], references: [id])
}
model TransactionStatus {
  id    Int    @id @default(autoincrement())
  status_name  String

  transaction Transaction[] @relation("TransactionStatus")

  logs         TransactionLog[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deleted         Boolean           @default(false)
  @@map("transaction_status")
}
